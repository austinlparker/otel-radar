{
  "id": 3,
  "name": "JavaScript (Node.JS)",
  "category": "developer",
  "description": "JavaScript on the server via Node.JS (or other runtimes) is a popular choice for both full-stack applications and serverless functions. OpenTelemetry for JS is an effective choice in this arena, but there are gaps.",
  "tier": 2,
  "dimensions": [
    {
      "id": 1,
      "name": "Developer Experience",
      "description": "This can be a challenge due to the wide variety of options available in the Node ecosystem. Some instrumentation patterns can be difficult to implement due to a reliance on closures.",
      "score": 0.5
    },
    {
      "id": 2,
      "name": "Instrumentation Libraries",
      "description": "Most popular libraries have OOTB instrumentation, but it tends to favor more well-established packages.",
      "score": 0.8
    },
    {
      "id": 3,
      "name": "Documentation",
      "description": "Due to the amount of options available, documentation could be better. You may have to read the underlying code, especially if you're using newer tools.",
      "score": 0.7
    },
    {
      "id": 4,
      "name": "Signals",
      "description": "Tracing and Metrics are well supported, and Logging support works well for some popular log libraries.",
      "score": 0.8
    },
    {
      "id": 5,
      "name": "Architectures",
      "description": "While traditional containerized or service deployments work acceptably well, challenges exist with the OOTB experience for serverless or other unique runtime environments.",
      "score": 0.5
    }
  ]
}
